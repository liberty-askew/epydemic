#    -*- mode: org -*-


Archived entries from file /home/sd80/programming/epydemic/epydemic.org


* Release 1.6.1                                                     :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-06-07 Mon 10:35
  :ARCHIVE_FILE: ~/programming/epydemic/epydemic.org
  :ARCHIVE_OLPATH: epydemic: Epidemic simulation in Python/Release planning
  :ARCHIVE_CATEGORY: epydemic
  :ARCHIVE_ITAGS: PROJECT
  :END:

** Coding [1/1]

   - [X] Change topology parameters and markers so we can retrieve
     them

** Documentation [1/1]

   - [X] Add discussion of moving from R-values to parameters

* Release 1.5.1                                                     :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-06-07 Mon 10:35
  :ARCHIVE_FILE: ~/programming/epydemic/epydemic.org
  :ARCHIVE_OLPATH: epydemic: Epidemic simulation in Python/Release planning
  :ARCHIVE_CATEGORY: epydemic
  :ARCHIVE_ITAGS: PROJECT
  :END:

** Coding [1/1]

   - [X] Integrate accelerated simulation ([[*Improving sequential Gillespie simulation][below]])

** Bug fixes [1/1]

   - [X] Problem with monitor cookbook recipe code

** Documentation [1/1]

   - [X] Add documentation for DrawSet

* numba acceleration                                                :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-06-07 Mon 10:35
  :ARCHIVE_FILE: ~/programming/epydemic/epydemic.org
  :ARCHIVE_OLPATH: epydemic: Epidemic simulation in Python/Sub-projects/Acceleration
  :ARCHIVE_CATEGORY: epydemic
  :ARCHIVE_ITAGS: PROJECT
  :END:

git branch numba-acceleration

Idea: wrap StochasticDynamics.do() as a JIT-compiled function, since
that (and the event functions) are where most of the time is spent. If
it generate worthwhile speed-up, extend out to other elements that are
time-consuming.

The main simulation loop seems like a good place to start as it
involves a lot of looping and drawing from probability distributions,w
which should be accelerable.

Installing the latest numba (0.51.2) installs llvmlite-0.34.0, which
only works for versions of LLVM up to 10.0.x. The latest arch version
is 11.x, so I downgraded to the latest compatible version (and also
its libraries):

#+BEGIN_SRC sh
  pacman -U https://archive.archlinux.org/packages/l/llvm/llvm-10.0.1-3-x86_64.pkg.tar.zst
  pacman -U https://archive.archlinux.org/packages/l/llvm10-libs/llvm10-libs-10.0.1-3-x86_64.pkg.tar.zst
#+END_SRC

Doesn't seem to get much speed-up, even given it's quite numerical:
there are calls to get the event distribution and to check for
equilibrium that perhaps could be refactored?

* Release 1.7.1
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-06-10 Thu 17:27
  :ARCHIVE_FILE: ~/programming/epydemic/epydemic.org
  :ARCHIVE_OLPATH: epydemic: Epidemic simulation in Python/Release planning
  :ARCHIVE_CATEGORY: epydemic
  :ARCHIVE_ITAGS: PROJECT
  :END:

** Coding [4/4]

  - [X] Add degree-distribution-preserving rewiring functions to
    randomise networks while preserving p_k
    cite:UnreasonableEffectiveness
  - [X] Integrate GF library (branch gf)
  - [X] Add flag to parameters about the network topology used
    (branch topology-flag)
  - [X] Add memoisation to GF functions

** Bug fixes [0/0]

** Documentation [1/1]

   - [X] Add discussion of moving from R-values to parameters
